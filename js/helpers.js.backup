// General helper functions and constants
export function debounce(func, wait) {
    let timeout;
    return function(...args) {
        const context = this;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), wait);
    };
}

export function showAttendanceNotification(body, iconUrl = 'data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><rect width=%2290%25%22 height=%2290%25%22 x=%225%25%22 y=%225%25%22 fill=%22%23fff%22 stroke=%22%23000%22 stroke-width=%2210%25%22/><path d=%22M30 50 L45 65 L70 35%22 stroke=%22%234caf50%22 stroke-width=%2210%22 fill=%22none%22/></svg>') {
    if (!("Notification" in window)) {
        console.error("This browser does not support desktop notification.");
        return;
    }
    if (Notification.permission === "granted") {
        new Notification("Attendance Tracker", { body: body, icon: iconUrl });
    } else if (Notification.permission !== "denied") {
        Notification.requestPermission().then(permission => {
            if (permission === "granted") {
                new Notification("Attendance Tracker", { body: body, icon: iconUrl });
            }
        });
    }
}

export function calculateDistance(loc1, loc2) {
    const R = 6371e3; // metres
    const φ1 = loc1.latitude * Math.PI / 180;
    const φ2 = loc2.latitude * Math.PI / 180;
    const Δφ = (loc2.latitude - loc1.latitude) * Math.PI / 180;
    const Δλ = (loc2.longitude - loc1.longitude) * Math.PI / 180;
    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
              Math.cos(φ1) * Math.cos(φ2) *
              Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c; // in metres
}

export const themes = {
    'default': { background: '#fffbf7', foreground: '#45372b', accent: '#df7020' },
    'bsod': { background: '#153489', foreground: '#eceae5', accent: '#5ea5ee' },
    'dracula': { background: '#282a36', foreground: '#f8f8f2', accent: '#f44336' },
    'ultra-violet': { background: '#440184', foreground: '#BF00FF', accent: '#E78FFF' },
    'hello-kitty': { background: '#FFF0F5', foreground: '#4a4a4a', accent: '#ff1493' },
    'matrix': { background: '#2b2b2b', foreground: '#4eee85', accent: '#4eee85' },
    'dark-mode': { background: '#303030', foreground: '#e0e0e0', accent: '#9e9e9e' },
    'windows-98': { background: '#c0c0c0', foreground: '#000000', accent: '#008080' },
    'mint': { background: '#e5ffe5', foreground: '#2e8b57', accent: '#32cd3f' },
    'terminal': { background: '#1a170f', foreground: '#eceae5', accent: '#eec35e' }
};

// Cache management utilities
export const cacheManager = {
    // Clear all caches
    async clearAllCaches() {
        if ('caches' in window) {
            const cacheNames = await caches.keys();
            await Promise.all(
                cacheNames.map(cacheName => caches.delete(cacheName))
            );
            console.log('All caches cleared');
        }
    },

    // Clear specific cache
    async clearCache(cacheName) {
        if ('caches' in window) {
            await caches.delete(cacheName);
            console.log(`Cache ${cacheName} cleared`);
        }
    },

    // Force reload without cache
    forceReload() {
        // Clear browser cache for this page
        window.location.reload(true);
    },

    // Add cache busting parameter to URL
    addCacheBuster(url, version = Date.now()) {
        const urlObj = new URL(url, window.location.href);
        urlObj.searchParams.set('v', version);
        return urlObj.toString();
    },

    // Update service worker
    async updateServiceWorker() {
        if ('serviceWorker' in navigator) {
            const registrations = await navigator.serviceWorker.getRegistrations();
            for (const registration of registrations) {
                await registration.update();
            }
            console.log('Service worker updated');
        }
    },

    // Clear all storage
    clearAllStorage() {
        // Clear localStorage
        localStorage.clear();
        
        // Clear sessionStorage
        sessionStorage.clear();
        
        // Clear IndexedDB (if available)
        if ('indexedDB' in window) {
            indexedDB.databases().then(databases => {
                databases.forEach(db => {
                    indexedDB.deleteDatabase(db.name);
                });
            });
        }
        
        console.log('All storage cleared');
    }
};
